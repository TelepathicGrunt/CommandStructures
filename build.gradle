import com.modrinth.minotaur.TaskModrinthUpload
plugins {
    id 'eclipse'
    id 'idea'
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.modrinth.minotaur"

version = "${mod_version}+${mc_version}"
group = "com.telepathicgrunt"
archivesBaseName = "${modid}_forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "official", version: "${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Needed to make other mods with mixins be able to run in you development environment
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods { command_structures { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')

            // Needed to make other mods with mixins be able to run in you development environment
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods { command_structures {  source sourceSets.main } }
        }
    }
}

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

apply from: 'gradle/manifest.gradle'
apply from: 'gradle/maven.gradle'

String changelogText = file("CHANGELOG.md").getText('UTF-8')
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = "$System.env.CURSEFORGEKEY"
    int projectId = 565119

    def mainFile = upload(projectId, jar)
    mainFile.changelog = changelogText
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.displayName = "CommandStructures-Forge v${project.mod_version} (${project.mc_version} MC)"
    mainFile.addGameVersion("${project.mc_version}")
}

modrinth {
    token = "$System.env.MODRINTH"
    projectId = 'WEfvvlnl'
    versionName = "CommandStructures-Forge"
    versionNumber = project.version + "_forge"
    uploadFile = jar
    versionType = "RELEASE"
    changelog = changelogText
    gameVersions = ["${project.mc_version}"]
    loaders = ['forge']
}

task buildAndRelease {}
tasks.publish.mustRunAfter tasks.build
tasks.publishCurseForge.mustRunAfter tasks.publish
tasks.modrinth.mustRunAfter tasks.publish
tasks.buildAndRelease.dependsOn(tasks.build, tasks.publish, tasks.publishCurseForge, tasks.modrinth)
