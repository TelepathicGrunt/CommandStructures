buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'gradle.plugin.com.modrinth.minotaur', name: 'Minotaur', version: '1.2.1'
    }
}

plugins {
    id "net.darkhax.curseforgegradle" version "1.0.7"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}+${mc_version}"
group = "com.telepathicgrunt"
archivesBaseName = "${modid}_forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "official", version: "${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Needed to make other mods with mixins be able to run in you development environment
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods { command_structures { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Needed to make other mods with mixins be able to run in you development environment
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods { command_structures {  source sourceSets.main } }
        }
    }
}

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

apply from: 'gradle/manifest.gradle'
apply from: 'gradle/maven.gradle'
apply from: 'gradle/modrinth.gradle'
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = "$System.env.CURSEFORGEKEY"
    def projectId = 565119

    def mainFile = upload(projectId, jar)
    mainFile.setChangelog(file("CHANGELOG.md").toString())
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.displayName = "CommandStructures-Forge v${project.mod_version} (${project.mc_version} MC)"
}

task buildAndRelease {}
tasks.publish.mustRunAfter tasks.build
tasks.publishCurseForge.mustRunAfter tasks.publish
tasks.publishModrinth.mustRunAfter tasks.publish
tasks.buildAndRelease.dependsOn(tasks.build, tasks.publish, tasks.publishCurseForge, tasks.publishModrinth)
